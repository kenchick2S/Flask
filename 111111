import argparse
import json
from argparse import RawTextHelpFormatter
import requests
from typing import Optional
import warnings
try:
    from langflow.load import upload_file
except ImportError:
    warnings.warn("Langflow provides a function to help you upload files to the flow. Please install langflow to use it.")
    upload_file = None

BASE_API_URL = "http://127.0.0.1:7860"
FLOW_ID = "4cae43b5-4550-4d03-8001-db529510affb"
ENDPOINT = "" # You can set a specific endpoint name in the flow settings

# You can tweak the flow by adding a tweaks dictionary
# e.g {"OpenAI-XXXXX": {"model_name": "gpt-4"}}
TWEAKS = {
  "ChatInput-jV0J9": {
    "files": "",
    "sender": "User",
    "sender_name": "User",
    "session_id": "",
    "should_store_message": True
  },
  "Prompt-lGhTS": {
    "template": "parse question into key points, then output answer as format in chinese.\nEx:\nQ. 告訴我2025/04/23到期的債券類型產品。 包含產品名稱及到期日。\nA.\n資料條件：\n1. 時間：2025/04/23到期\n2. 債券類型\n3. 產品\n資料欄位：\n1. 產品名稱\n2. 到期日\n\nQ. 告訴我2021年全年銷售總額第二高的基金類型的產品。 包含產品名稱與總銷售金額。\nA.\n資料條件：\n1. 時間：2021年\n2. 全年銷售總額\n3. 第二高\n4. 基金類型\n5. 產品\n資料欄位：\n1. 產品名稱\n2. 總銷售金額\n\nQ. 告訴我Email為tracy35@example.org的客戶最近一次購買的產品，包含產品名稱與購買日期。\nA.\n資料條件：\n1. Email為tracy35@example.org\n2. 客戶\n3. 最近一次\n4. 購買的產品\n資料欄位：\n1. 產品名稱\n2. 購買日期\n\nQ. 告訴我所有出生日期在1990年前的員工的總業績金額。包含員工姓名與業績總額。\nA.\n資料條件：\n1. 所有\n2. 出生日期在1990年前\n3. 員工\n4. 總業績金額\n資料欄位：\n1. 員工姓名\n2. 業績總額\n\nQ. 告訴我所有年齡大於50歲客戶的交易記錄，包含客戶姓名與每筆交易金額。\nA.\n資料條件：\n1. 所有\n2. 年齡大於50歲\n3. 客戶\n4. 交易記錄\n資料欄位：\n1. 客戶姓名\n2. 每筆交易金額\n\nQ. 告訴我員工賴芯菡已完成的交易筆數。包含員工姓名。\nA.\n資料條件：\n1. 員工：賴芯菡\n2. 已完成\n3. 交易筆數\n資料欄位：\n1. 員工姓名\n\nUser: {user_input}",
    "user_input": ""
  },
  "ChatOutput-zJS5p": {
    "data_template": "{text}",
    "input_value": "",
    "sender": "Machine",
    "sender_name": "AI",
    "session_id": "",
    "should_store_message": True
  },
  "OllamaModel-kGRvk": {
    "base_url": "http://localhost:11434",
    "format": "",
    "input_value": "",
    "metadata": {},
    "mirostat": "Disabled",
    "mirostat_eta": None,
    "mirostat_tau": None,
    "model_name": "gemma2:latest",
    "num_ctx": None,
    "num_gpu": None,
    "num_thread": None,
    "repeat_last_n": None,
    "repeat_penalty": None,
    "stop_tokens": "",
    "stream": False,
    "system": "",
    "system_message": "",
    "tags": "",
    "temperature": 0,
    "template": "",
    "tfs_z": None,
    "timeout": None,
    "top_k": None,
    "top_p": None,
    "verbose": True
  },
  "OllamaEmbeddings-uJKV7": {
    "base_url": "http://localhost:11434",
    "model": "aerok/zpoint_large_embedding_zh:latest",
    "temperature": 0.1
  },
  "CustomComponent-RFa62": {
    "keywords": "",
    "metadata_directory": "",
    "topK": 5
  },
  "OllamaModel-cVR6p": {
    "base_url": "http://localhost:11434",
    "format": "",
    "input_value": "",
    "metadata": {},
    "mirostat": "Disabled",
    "mirostat_eta": None,
    "mirostat_tau": None,
    "model_name": "gemma2:latest",
    "num_ctx": None,
    "num_gpu": None,
    "num_thread": None,
    "repeat_last_n": None,
    "repeat_penalty": None,
    "stop_tokens": "",
    "stream": False,
    "system": "",
    "system_message": "",
    "tags": "",
    "temperature": 0,
    "template": "",
    "tfs_z": None,
    "timeout": None,
    "top_k": None,
    "top_p": None,
    "verbose": True
  },
  "Prompt-hIUjS": {
    "template": "Think what tables do question need? What database do these tables belong to? \nList all table that is related to question.\nFormat: \"tables: table1, table2, etc.; database: database which tables belong to\"\nNo more explanations or messages, answer as format.\n\n{table_inform}\n\nUser: {user_input}",
    "user_input": "",
    "table_inform": ""
  },
  "CustomComponent-e2l9m": {
    "database_inform": "",
    "input": "",
    "keywords_topk": 5,
    "metadata_directory": "",
    "question_topk": 30,
    "topK": 5
  },
  "TextInput-i4UXN": {
    "input_value": "C:/Users/admin/Downloads/Fubon_LangChain_Project_v2.3/Fubon_LangChain_Project_v2.2/database/"
  },
  "OllamaModel-F0wUD": {
    "base_url": "http://localhost:11434",
    "format": "",
    "input_value": "",
    "metadata": {},
    "mirostat": "Disabled",
    "mirostat_eta": None,
    "mirostat_tau": None,
    "model_name": "gemma2:latest",
    "num_ctx": None,
    "num_gpu": None,
    "num_thread": None,
    "repeat_last_n": None,
    "repeat_penalty": None,
    "stop_tokens": "",
    "stream": False,
    "system": "",
    "system_message": "",
    "tags": "",
    "temperature": 0,
    "template": "",
    "tfs_z": None,
    "timeout": None,
    "top_k": None,
    "top_p": None,
    "verbose": True
  },
  "Prompt-arpwd": {
    "template": "{table_inform}\n\nFirst, follow the example:\n1. 問題中有與'總數'、'總'相關字詞： SELECT SUM() FROM table_name GROUP BY\n2. 問題中有與'筆數'相關字詞: SELECT COUNT(*) GROUP BY\n3. 問題中有與日期'年'、'月'相關字詞： YEAR() or MONTH()\n4. 問題中有與'最'、'第n高'相關字詞： ORDER BY column_name (DESC or ASC) LIMIT 1 (OFFSET n-1);\n5. 字串匹配優先使用： WHERE column_name LIKE '%STRING%'\n\nThen, follow the rules:\n1. use HAVING aggregates condition with columns in GROUP BY instead of WHERE.\n2. Don't use code number matching name as condition, code number is not human name.\n3. JOIN every table.\n\nFinally, answer as format \n```sql\n   SELECT (DISTINCT) column_name FROM table_name;\n```, choose required columns depends on metadata.\n\nUser: \n{user_input}\n{keywords}",
    "user_input": "",
    "table_inform": "",
    "keywords": ""
  }
}

def run_flow(message: str,
  endpoint: str,
  output_type: str = "chat",
  input_type: str = "chat",
  tweaks: Optional[dict] = None,
  api_key: Optional[str] = None) -> dict:
    """
    Run a flow with a given message and optional tweaks.

    :param message: The message to send to the flow
    :param endpoint: The ID or the endpoint name of the flow
    :param tweaks: Optional tweaks to customize the flow
    :return: The JSON response from the flow
    """
    api_url = f"{BASE_API_URL}/api/v1/run/{endpoint}"

    payload = {
        "input_value": message,
        "output_type": output_type,
        "input_type": input_type,
    }
    headers = None
    if tweaks:
        payload["tweaks"] = tweaks
    if api_key:
        headers = {"x-api-key": api_key}
    response = requests.post(api_url, json=payload, headers=headers)
    return response.json()

def main():
    parser = argparse.ArgumentParser(description="""Run a flow with a given message and optional tweaks.
Run it like: python <your file>.py "your message here" --endpoint "your_endpoint" --tweaks '{"key": "value"}'""",
        formatter_class=RawTextHelpFormatter)
    parser.add_argument("message", type=str, help="The message to send to the flow")
    parser.add_argument("--endpoint", type=str, default=ENDPOINT or FLOW_ID, help="The ID or the endpoint name of the flow")
    parser.add_argument("--tweaks", type=str, help="JSON string representing the tweaks to customize the flow", default=json.dumps(TWEAKS))
    parser.add_argument("--api_key", type=str, help="API key for authentication", default=None)
    parser.add_argument("--output_type", type=str, default="chat", help="The output type")
    parser.add_argument("--input_type", type=str, default="chat", help="The input type")
    parser.add_argument("--upload_file", type=str, help="Path to the file to upload", default=None)
    parser.add_argument("--components", type=str, help="Components to upload the file to", default=None)

    args = parser.parse_args()
    try:
      tweaks = json.loads(args.tweaks)
    except json.JSONDecodeError:
      raise ValueError("Invalid tweaks JSON string")

    if args.upload_file:
        if not upload_file:
            raise ImportError("Langflow is not installed. Please install it to use the upload_file function.")
        elif not args.components:
            raise ValueError("You need to provide the components to upload the file to.")
        tweaks = upload_file(file_path=args.upload_file, host=BASE_API_URL, flow_id=args.endpoint, components=[args.components], tweaks=tweaks)

    response = run_flow(
        message=args.message,
        endpoint=args.endpoint,
        output_type=args.output_type,
        input_type=args.input_type,
        tweaks=tweaks,
        api_key=args.api_key
    )

    print(json.dumps(response, indent=2))

if __name__ == "__main__":
    main()
