
from langchain.pydantic_v1 import BaseModel, Field
from langchain.tools import BaseTool, StructuredTool, tool

from getCustomerDataset import  getCsvDataset

from getSummary import getSummary
from getFAISS import getFAISS

from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import AIMessage

from langchain.agents import create_structured_chat_agent
from langchain.agents import AgentExecutor

from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import OllamaEmbeddings

import re
import os

# === LLM ===
from langchain_community.llms import Ollama

# llm = Ollama(model = "llama3", temperature = 0, num_predict=320)
# llm2 = Ollama(model = "gemma:2b", temperature = 0.2)
llm = Ollama(model = "gemma2", top_k=1) #llama3-chatqa:8b, qwen:4b(Alibaba), aya:8b(Cohere), phi3 (3.8B)(Microsoft), gemma:2b zhaoyun/phi3-128k-chinese
embeddings = OllamaEmbeddings(model="shaw/dmeta-embedding-zh")


SummaryFunc = getSummary(llm) # 宣告一個儲存資料和做總結的物件
RetrievalQA = getFAISS(llm)

def get_fields(lines, table_name):    
    result = ''
    for field in lines:
        if ((table_name.strip()) in field.split('|')[0]):
            result += (field.split('.')[-1]+'\n')

    return result


def get_metadata(directory):    
    with open(directory+"table_meta.txt", 'r', encoding='utf-8') as file:
        result = file.read()
    
    return result

def get_tables_name(directory):
    name_list = []
    for csv in os.listdir(directory):
        csv_name, csv_extentsion = csv.split('.')
        if  csv_extentsion == "csv":
            name_list.append(csv_name)
    
    return ", ".join(name for name in name_list)
    
def parse_question(msg):
    system = f'''
        parse question into key points, then output answer as format in chinese.
        Ex:
        Q. 告訴我2025/04/23到期的債券類型產品。 包含產品名稱及到期日。
        A.
        資料條件：
        1. 2025/04/23到期
        2. 債券類型
        3. 產品
        資料欄位：
        1. 產品名稱
        2. 到期日

        Q. 告訴我2021年全年銷售總額第二高的基金類型的產品。 包含產品名稱與總銷售金額。
        A.
        資料條件：
        1. 2021年
        2. 全年銷售總額
        3. 第二高
        4. 基金類型
        5. 產品
        資料欄位：
        1. 產品名稱
        2. 總銷售金額

        Q. 告訴我Email為tracy35@example.org的客戶最近一次購買的產品，包含產品名稱與購買日期。
        A.
        資料條件：
        1. Email為tracy35@example.org
        2. 客戶
        3. 最近一次
        4. 購買的產品
        資料欄位：
        1. 產品名稱
        2. 購買日期

        Q. 告訴我所有出生日期在1990年前的員工的總業績金額。包含員工姓名與業績總額。
        A.
        資料條件：
        1. 所有
        2. 出生日期在1990年前
        3. 員工
        4. 總業績金額
        資料欄位：
        1. 員工姓名
        2. 業績總額

        Q. 告訴我所有年齡大於50歲客戶的交易記錄，包含客戶姓名與每筆交易金額。
        A.
        資料條件：
        1. 所有
        2. 年齡大於50歲
        3. 客戶
        4. 交易記錄
        資料欄位：
        1. 客戶姓名
        2. 每筆交易金額

        Q. 告訴我員工賴芯菡已完成的交易筆數。包含員工姓名。
        A.
        資料條件：
        1. 員工賴芯菡
        2. 已完成
        3. 交易筆數
        資料欄位：
        1. 員工姓名
    '''

    human = '''{input}'''

    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", system),
            ("human", human),
        ]
    )
    print("Processing ...")
    return llm.invoke(prompt.format(input=msg))

def generate_tables_name(table_inform, msg, llm):
    system = f'''
        {table_inform}
        
        List all 'table_name' in one 'database' that is related to question.
        Ex: database: table_name_1, table_name_2
        No more explanations or messages, only 'table_name' and split by ','.
    '''

    human = '''{input}'''

    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", system),
            ("human", human),
        ]
    )
    print("Processing ...")
    return llm.invoke(prompt.format(input=msg))


def generate_SQL(table_inform, msg, llm):
    print("input: " + msg + "\n")
    system_sql = f'''
    {table_inform}

    First, follow the example:
    1. 問題中有與'總數'、'總'相關字詞： SELECT SUM() FROM table_name GROUP BY
    2. 問題中有與'筆數'相關字詞: SELECT COUNT(*) GROUP BY
    3. 問題需要不只一個 table 的欄位： JOIN ON fields with diferent name in different tables
    4. 問題中有與日期'年'、'月'相關字詞： YEAR() or MONTH()
    5. 問題中有與'最'、'第n高'相關字詞： ORDER BY field_name (DESC or ASC) LIMIT 1 (OFFSET n-1);
    6. 字串匹配優先使用： WHERE field_name LIKE '%STRING%'

    Then, follow the rules:
    1. use HAVING aggregates condition instead of WHERE.
    2. JOIN all table that need to be queried.

    Finally, answer as format 
    ```sql
        SELECT (DISTINCT) field_name FROM table_name;
    ```, choose field_name depends on metadata.
    '''

    human_sql = '''{input}

        (Please respond a SQL Command)'''

    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", system_sql),
            ("human", human_sql),
        ]
    )
    print("Processing ...")
    return llm.invoke(prompt.format(input=msg))

def query_by_SQL():

    directory = './database/'
    file_name = "/database_table_meta.txt"
    col_file_name = "/col_meta.txt"

    pattern = r'\d+\.\s*(.*?)\n'
    keywords_list = re.findall(pattern, SummaryFunc.keyword)
    keywords_list = [keyword.strip() for keyword in keywords_list] 

    table_list = []
    for database in os.listdir(directory):
        with open(directory + database + file_name, 'r', encoding='utf-8') as file:
            lines = file.read().split('\n')
            table_list += lines[1:]
    table_list = [item for item in table_list if item != '']

    table_vectors = FAISS.from_texts(table_list, embeddings)
    table_inform_list = []
    for keyword in keywords_list:
        for result in table_vectors.similarity_search_with_score(keyword, k=3):
            table_inform_list.append(result[0].page_content)

    tables_set = set(table_inform_list)
    database_inform = 'database | table_name | metadata\n' + '\n'.join(tables_set)

    tables = generate_tables_name(database_inform, SummaryFunc.Input_Question, llm)

    print(tables)

    selected_database = tables.split(':')[0].strip()
    selected_tables = tables.split(':')[-1].strip()
    
    with open(directory + selected_database + col_file_name, 'r', encoding='utf-8') as file:
        lines = file.read().split('\n')

    col_list = []
    for table_name in selected_tables.split(','):
        for col in lines:
            if ((table_name.strip()) in col.split('|')[0]):
                col_list.append(col)

    col_vectors = FAISS.from_texts(col_list, embeddings)
    for_join_keyword_list = [table_name.strip()+" 代碼" for table_name in selected_tables.split(',')]

    col_inform_list = []
    for keyword in keywords_list+for_join_keyword_list:
        for result in col_vectors.similarity_search_with_score(keyword, k=3):
            col_inform_list.append(result[0].page_content)
    
    selected_columns = set(col_inform_list)

    print(selected_columns)

    table_inform = ""
    for table_name in selected_tables.split(','):
        table_inform += f"{lines[0].replace('table_name', table_name.strip())}\n"
        if table_name.strip() != '':
            table_inform += get_fields(selected_columns, table_name) + '\n'

    sqlCommand = generate_SQL(table_inform, SummaryFunc.Input_Question, llm)
    sqlCommand = sqlCommand[sqlCommand.find('SELECT'): sqlCommand.find(';')]

    print(sqlCommand)

    SummaryFunc.sqlCommand = sqlCommand

    return SummaryFunc.store_dataset(getCsvDataset.dataset_query_sql(directory + selected_database, sqlCommand))

